// ðŸ”— KQL Playground: Join Basics
// -----------------------------------------------------------
// The `join` operator combines data from two tables based on
// a shared field (like Account, IPAddress, or TimeGenerated).
//
// Common use cases:
// - Correlating failed and successful logons
// - Enriching events with alert or threat intel data
// - Finding account overlaps across tables
// -----------------------------------------------------------


// ðŸ”¹ 1. Inner join: failed + successful logons by Account

let FailedLogons = SecurityEvent
| where EventID == 4625
| project FailTime = TimeGenerated, Account, Computer;

let SuccessLogons = SecurityEvent
| where EventID == 4624
| project SuccessTime = TimeGenerated, Account, Computer;

FailedLogons
| join kind=inner SuccessLogons on Account
| project Account, FailTime, SuccessTime, Computer


// ðŸ”¹ 2. Left outer join: all "admin" accounts, with or without alerts

let AdminAccounts = SecurityEvent
| where Account endswith "admin"
| summarize LastSeen = max(TimeGenerated) by Account;

let KnownAlerts = AlertInfo
| project AlertName, Account, TimeGenerated;

AdminAccounts
| join kind=leftouter KnownAlerts on Account
| project Account, LastSeen, AlertName, TimeGenerated


// ðŸ”¹ 3. Right outer join: all accounts from alerts, even without logon activity

let RecentLogons = SecurityEvent
| where EventID == 4624
| summarize LastLogon = max(TimeGenerated) by Account;

let AlertedAccounts = AlertInfo
| project AlertName, Account, AlertTime = TimeGenerated;

RecentLogons
| join kind=rightouter AlertedAccounts on Account
| project Account, LastLogon, AlertName, AlertTime
| sort by AlertTime desc
| take 10


// ðŸ”¹ 4. Full outer join: combine both sides and keep unmatched entries

let GroupA = datatable(User:string) ["alice", "bob", "carol"];
let GroupB = datatable(User:string) ["carol", "dan", "erin"];

GroupA
| join kind=fullouter GroupB on User
| project User
| sort by User asc


// -----------------------------------------------------------
// ðŸ’¡ JOIN TYPES:
// inner        â†’ Only matching rows from both tables
// leftouter    â†’ All rows from left, plus matches from right
// rightouter   â†’ All rows from right, plus matches from left
// fullouter    â†’ All rows from both, matches where possible
//
// âœ… Tips:
// - Use `let` to define your subqueries before joining
- Align fields using `project` or `rename`
// - Joins are case-sensitive and require matching field names
// -----------------------------------------------------------
